// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgendaServiceClient is the client API for AgendaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgendaServiceClient interface {
	GetAgenda(ctx context.Context, in *AgendaIDIn, opts ...grpc.CallOption) (*AgendaResponse, error)
	SearchAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*AgendaRepeatResponse, error)
	PostAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*AgendaResponse, error)
	PatchAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*Result, error)
	DeleteAgenda(ctx context.Context, in *AgendaIDIn, opts ...grpc.CallOption) (*Result, error)
}

type agendaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgendaServiceClient(cc grpc.ClientConnInterface) AgendaServiceClient {
	return &agendaServiceClient{cc}
}

func (c *agendaServiceClient) GetAgenda(ctx context.Context, in *AgendaIDIn, opts ...grpc.CallOption) (*AgendaResponse, error) {
	out := new(AgendaResponse)
	err := c.cc.Invoke(ctx, "/proto.AgendaService/GetAgenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) SearchAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*AgendaRepeatResponse, error) {
	out := new(AgendaRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.AgendaService/SearchAgenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) PostAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*AgendaResponse, error) {
	out := new(AgendaResponse)
	err := c.cc.Invoke(ctx, "/proto.AgendaService/PostAgenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) PatchAgenda(ctx context.Context, in *Agenda, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.AgendaService/PatchAgenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) DeleteAgenda(ctx context.Context, in *AgendaIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.AgendaService/DeleteAgenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgendaServiceServer is the server API for AgendaService service.
// All implementations must embed UnimplementedAgendaServiceServer
// for forward compatibility
type AgendaServiceServer interface {
	GetAgenda(context.Context, *AgendaIDIn) (*AgendaResponse, error)
	SearchAgenda(context.Context, *Agenda) (*AgendaRepeatResponse, error)
	PostAgenda(context.Context, *Agenda) (*AgendaResponse, error)
	PatchAgenda(context.Context, *Agenda) (*Result, error)
	DeleteAgenda(context.Context, *AgendaIDIn) (*Result, error)
	mustEmbedUnimplementedAgendaServiceServer()
}

// UnimplementedAgendaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgendaServiceServer struct {
}

func (UnimplementedAgendaServiceServer) GetAgenda(context.Context, *AgendaIDIn) (*AgendaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgenda not implemented")
}
func (UnimplementedAgendaServiceServer) SearchAgenda(context.Context, *Agenda) (*AgendaRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAgenda not implemented")
}
func (UnimplementedAgendaServiceServer) PostAgenda(context.Context, *Agenda) (*AgendaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAgenda not implemented")
}
func (UnimplementedAgendaServiceServer) PatchAgenda(context.Context, *Agenda) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAgenda not implemented")
}
func (UnimplementedAgendaServiceServer) DeleteAgenda(context.Context, *AgendaIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgenda not implemented")
}
func (UnimplementedAgendaServiceServer) mustEmbedUnimplementedAgendaServiceServer() {}

// UnsafeAgendaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgendaServiceServer will
// result in compilation errors.
type UnsafeAgendaServiceServer interface {
	mustEmbedUnimplementedAgendaServiceServer()
}

func RegisterAgendaServiceServer(s grpc.ServiceRegistrar, srv AgendaServiceServer) {
	s.RegisterService(&AgendaService_ServiceDesc, srv)
}

func _AgendaService_GetAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgendaIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).GetAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgendaService/GetAgenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).GetAgenda(ctx, req.(*AgendaIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_SearchAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agenda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).SearchAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgendaService/SearchAgenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).SearchAgenda(ctx, req.(*Agenda))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_PostAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agenda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).PostAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgendaService/PostAgenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).PostAgenda(ctx, req.(*Agenda))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_PatchAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agenda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).PatchAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgendaService/PatchAgenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).PatchAgenda(ctx, req.(*Agenda))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_DeleteAgenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgendaIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).DeleteAgenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgendaService/DeleteAgenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).DeleteAgenda(ctx, req.(*AgendaIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// AgendaService_ServiceDesc is the grpc.ServiceDesc for AgendaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgendaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgendaService",
	HandlerType: (*AgendaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgenda",
			Handler:    _AgendaService_GetAgenda_Handler,
		},
		{
			MethodName: "SearchAgenda",
			Handler:    _AgendaService_SearchAgenda_Handler,
		},
		{
			MethodName: "PostAgenda",
			Handler:    _AgendaService_PostAgenda_Handler,
		},
		{
			MethodName: "PatchAgenda",
			Handler:    _AgendaService_PatchAgenda_Handler,
		},
		{
			MethodName: "DeleteAgenda",
			Handler:    _AgendaService_DeleteAgenda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// VisitorServiceClient is the client API for VisitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitorServiceClient interface {
	GetVisitor(ctx context.Context, in *VisitorIDIn, opts ...grpc.CallOption) (*VisitorResponse, error)
	SearchVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*VisitorRepeatResponse, error)
	PostVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*VisitorResponse, error)
	PatchVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*Result, error)
	DeleteVisitor(ctx context.Context, in *VisitorIDIn, opts ...grpc.CallOption) (*Result, error)
}

type visitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitorServiceClient(cc grpc.ClientConnInterface) VisitorServiceClient {
	return &visitorServiceClient{cc}
}

func (c *visitorServiceClient) GetVisitor(ctx context.Context, in *VisitorIDIn, opts ...grpc.CallOption) (*VisitorResponse, error) {
	out := new(VisitorResponse)
	err := c.cc.Invoke(ctx, "/proto.VisitorService/GetVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorServiceClient) SearchVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*VisitorRepeatResponse, error) {
	out := new(VisitorRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.VisitorService/SearchVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorServiceClient) PostVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*VisitorResponse, error) {
	out := new(VisitorResponse)
	err := c.cc.Invoke(ctx, "/proto.VisitorService/PostVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorServiceClient) PatchVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.VisitorService/PatchVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitorServiceClient) DeleteVisitor(ctx context.Context, in *VisitorIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.VisitorService/DeleteVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitorServiceServer is the server API for VisitorService service.
// All implementations must embed UnimplementedVisitorServiceServer
// for forward compatibility
type VisitorServiceServer interface {
	GetVisitor(context.Context, *VisitorIDIn) (*VisitorResponse, error)
	SearchVisitor(context.Context, *Visitor) (*VisitorRepeatResponse, error)
	PostVisitor(context.Context, *Visitor) (*VisitorResponse, error)
	PatchVisitor(context.Context, *Visitor) (*Result, error)
	DeleteVisitor(context.Context, *VisitorIDIn) (*Result, error)
	mustEmbedUnimplementedVisitorServiceServer()
}

// UnimplementedVisitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVisitorServiceServer struct {
}

func (UnimplementedVisitorServiceServer) GetVisitor(context.Context, *VisitorIDIn) (*VisitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitor not implemented")
}
func (UnimplementedVisitorServiceServer) SearchVisitor(context.Context, *Visitor) (*VisitorRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVisitor not implemented")
}
func (UnimplementedVisitorServiceServer) PostVisitor(context.Context, *Visitor) (*VisitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVisitor not implemented")
}
func (UnimplementedVisitorServiceServer) PatchVisitor(context.Context, *Visitor) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchVisitor not implemented")
}
func (UnimplementedVisitorServiceServer) DeleteVisitor(context.Context, *VisitorIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVisitor not implemented")
}
func (UnimplementedVisitorServiceServer) mustEmbedUnimplementedVisitorServiceServer() {}

// UnsafeVisitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitorServiceServer will
// result in compilation errors.
type UnsafeVisitorServiceServer interface {
	mustEmbedUnimplementedVisitorServiceServer()
}

func RegisterVisitorServiceServer(s grpc.ServiceRegistrar, srv VisitorServiceServer) {
	s.RegisterService(&VisitorService_ServiceDesc, srv)
}

func _VisitorService_GetVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitorIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServiceServer).GetVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VisitorService/GetVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServiceServer).GetVisitor(ctx, req.(*VisitorIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorService_SearchVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Visitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServiceServer).SearchVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VisitorService/SearchVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServiceServer).SearchVisitor(ctx, req.(*Visitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorService_PostVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Visitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServiceServer).PostVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VisitorService/PostVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServiceServer).PostVisitor(ctx, req.(*Visitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorService_PatchVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Visitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServiceServer).PatchVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VisitorService/PatchVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServiceServer).PatchVisitor(ctx, req.(*Visitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitorService_DeleteVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitorIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitorServiceServer).DeleteVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VisitorService/DeleteVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitorServiceServer).DeleteVisitor(ctx, req.(*VisitorIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// VisitorService_ServiceDesc is the grpc.ServiceDesc for VisitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VisitorService",
	HandlerType: (*VisitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVisitor",
			Handler:    _VisitorService_GetVisitor_Handler,
		},
		{
			MethodName: "SearchVisitor",
			Handler:    _VisitorService_SearchVisitor_Handler,
		},
		{
			MethodName: "PostVisitor",
			Handler:    _VisitorService_PostVisitor_Handler,
		},
		{
			MethodName: "PatchVisitor",
			Handler:    _VisitorService_PatchVisitor_Handler,
		},
		{
			MethodName: "DeleteVisitor",
			Handler:    _VisitorService_DeleteVisitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// WardBusinessRelServiceClient is the client API for WardBusinessRelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardBusinessRelServiceClient interface {
	GetWardBusinessRel(ctx context.Context, in *WardBusinessRelIDIn, opts ...grpc.CallOption) (*WardBusinessRelResponse, error)
	SearchWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*WardBusinessRelRepeatResponse, error)
	PostWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*WardBusinessRelResponse, error)
	PatchWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*Result, error)
	DeleteWardBusinessRel(ctx context.Context, in *WardBusinessRelIDIn, opts ...grpc.CallOption) (*Result, error)
}

type wardBusinessRelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWardBusinessRelServiceClient(cc grpc.ClientConnInterface) WardBusinessRelServiceClient {
	return &wardBusinessRelServiceClient{cc}
}

func (c *wardBusinessRelServiceClient) GetWardBusinessRel(ctx context.Context, in *WardBusinessRelIDIn, opts ...grpc.CallOption) (*WardBusinessRelResponse, error) {
	out := new(WardBusinessRelResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessRelService/GetWardBusinessRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessRelServiceClient) SearchWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*WardBusinessRelRepeatResponse, error) {
	out := new(WardBusinessRelRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessRelService/SearchWardBusinessRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessRelServiceClient) PostWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*WardBusinessRelResponse, error) {
	out := new(WardBusinessRelResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessRelService/PostWardBusinessRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessRelServiceClient) PatchWardBusinessRel(ctx context.Context, in *WardBusinessRel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessRelService/PatchWardBusinessRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessRelServiceClient) DeleteWardBusinessRel(ctx context.Context, in *WardBusinessRelIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessRelService/DeleteWardBusinessRel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardBusinessRelServiceServer is the server API for WardBusinessRelService service.
// All implementations must embed UnimplementedWardBusinessRelServiceServer
// for forward compatibility
type WardBusinessRelServiceServer interface {
	GetWardBusinessRel(context.Context, *WardBusinessRelIDIn) (*WardBusinessRelResponse, error)
	SearchWardBusinessRel(context.Context, *WardBusinessRel) (*WardBusinessRelRepeatResponse, error)
	PostWardBusinessRel(context.Context, *WardBusinessRel) (*WardBusinessRelResponse, error)
	PatchWardBusinessRel(context.Context, *WardBusinessRel) (*Result, error)
	DeleteWardBusinessRel(context.Context, *WardBusinessRelIDIn) (*Result, error)
	mustEmbedUnimplementedWardBusinessRelServiceServer()
}

// UnimplementedWardBusinessRelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWardBusinessRelServiceServer struct {
}

func (UnimplementedWardBusinessRelServiceServer) GetWardBusinessRel(context.Context, *WardBusinessRelIDIn) (*WardBusinessRelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWardBusinessRel not implemented")
}
func (UnimplementedWardBusinessRelServiceServer) SearchWardBusinessRel(context.Context, *WardBusinessRel) (*WardBusinessRelRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWardBusinessRel not implemented")
}
func (UnimplementedWardBusinessRelServiceServer) PostWardBusinessRel(context.Context, *WardBusinessRel) (*WardBusinessRelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWardBusinessRel not implemented")
}
func (UnimplementedWardBusinessRelServiceServer) PatchWardBusinessRel(context.Context, *WardBusinessRel) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchWardBusinessRel not implemented")
}
func (UnimplementedWardBusinessRelServiceServer) DeleteWardBusinessRel(context.Context, *WardBusinessRelIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWardBusinessRel not implemented")
}
func (UnimplementedWardBusinessRelServiceServer) mustEmbedUnimplementedWardBusinessRelServiceServer() {
}

// UnsafeWardBusinessRelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardBusinessRelServiceServer will
// result in compilation errors.
type UnsafeWardBusinessRelServiceServer interface {
	mustEmbedUnimplementedWardBusinessRelServiceServer()
}

func RegisterWardBusinessRelServiceServer(s grpc.ServiceRegistrar, srv WardBusinessRelServiceServer) {
	s.RegisterService(&WardBusinessRelService_ServiceDesc, srv)
}

func _WardBusinessRelService_GetWardBusinessRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessRelIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessRelServiceServer).GetWardBusinessRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessRelService/GetWardBusinessRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessRelServiceServer).GetWardBusinessRel(ctx, req.(*WardBusinessRelIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessRelService_SearchWardBusinessRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessRel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessRelServiceServer).SearchWardBusinessRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessRelService/SearchWardBusinessRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessRelServiceServer).SearchWardBusinessRel(ctx, req.(*WardBusinessRel))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessRelService_PostWardBusinessRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessRel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessRelServiceServer).PostWardBusinessRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessRelService/PostWardBusinessRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessRelServiceServer).PostWardBusinessRel(ctx, req.(*WardBusinessRel))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessRelService_PatchWardBusinessRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessRel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessRelServiceServer).PatchWardBusinessRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessRelService/PatchWardBusinessRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessRelServiceServer).PatchWardBusinessRel(ctx, req.(*WardBusinessRel))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessRelService_DeleteWardBusinessRel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessRelIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessRelServiceServer).DeleteWardBusinessRel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessRelService/DeleteWardBusinessRel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessRelServiceServer).DeleteWardBusinessRel(ctx, req.(*WardBusinessRelIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// WardBusinessRelService_ServiceDesc is the grpc.ServiceDesc for WardBusinessRelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WardBusinessRelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WardBusinessRelService",
	HandlerType: (*WardBusinessRelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWardBusinessRel",
			Handler:    _WardBusinessRelService_GetWardBusinessRel_Handler,
		},
		{
			MethodName: "SearchWardBusinessRel",
			Handler:    _WardBusinessRelService_SearchWardBusinessRel_Handler,
		},
		{
			MethodName: "PostWardBusinessRel",
			Handler:    _WardBusinessRelService_PostWardBusinessRel_Handler,
		},
		{
			MethodName: "PatchWardBusinessRel",
			Handler:    _WardBusinessRelService_PatchWardBusinessRel_Handler,
		},
		{
			MethodName: "DeleteWardBusinessRel",
			Handler:    _WardBusinessRelService_DeleteWardBusinessRel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// WardBusinessSusServiceClient is the client API for WardBusinessSusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardBusinessSusServiceClient interface {
	GetWardBusinessSus(ctx context.Context, in *WardBusinessSusIDIn, opts ...grpc.CallOption) (*WardBusinessSusResponse, error)
	SearchWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*WardBusinessSusRepeatResponse, error)
	PostWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*WardBusinessSusResponse, error)
	PatchWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*Result, error)
	DeleteWardBusinessSus(ctx context.Context, in *WardBusinessSusIDIn, opts ...grpc.CallOption) (*Result, error)
}

type wardBusinessSusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWardBusinessSusServiceClient(cc grpc.ClientConnInterface) WardBusinessSusServiceClient {
	return &wardBusinessSusServiceClient{cc}
}

func (c *wardBusinessSusServiceClient) GetWardBusinessSus(ctx context.Context, in *WardBusinessSusIDIn, opts ...grpc.CallOption) (*WardBusinessSusResponse, error) {
	out := new(WardBusinessSusResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessSusService/GetWardBusinessSus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessSusServiceClient) SearchWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*WardBusinessSusRepeatResponse, error) {
	out := new(WardBusinessSusRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessSusService/SearchWardBusinessSus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessSusServiceClient) PostWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*WardBusinessSusResponse, error) {
	out := new(WardBusinessSusResponse)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessSusService/PostWardBusinessSus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessSusServiceClient) PatchWardBusinessSus(ctx context.Context, in *WardBusinessSus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessSusService/PatchWardBusinessSus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardBusinessSusServiceClient) DeleteWardBusinessSus(ctx context.Context, in *WardBusinessSusIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.WardBusinessSusService/DeleteWardBusinessSus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardBusinessSusServiceServer is the server API for WardBusinessSusService service.
// All implementations must embed UnimplementedWardBusinessSusServiceServer
// for forward compatibility
type WardBusinessSusServiceServer interface {
	GetWardBusinessSus(context.Context, *WardBusinessSusIDIn) (*WardBusinessSusResponse, error)
	SearchWardBusinessSus(context.Context, *WardBusinessSus) (*WardBusinessSusRepeatResponse, error)
	PostWardBusinessSus(context.Context, *WardBusinessSus) (*WardBusinessSusResponse, error)
	PatchWardBusinessSus(context.Context, *WardBusinessSus) (*Result, error)
	DeleteWardBusinessSus(context.Context, *WardBusinessSusIDIn) (*Result, error)
	mustEmbedUnimplementedWardBusinessSusServiceServer()
}

// UnimplementedWardBusinessSusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWardBusinessSusServiceServer struct {
}

func (UnimplementedWardBusinessSusServiceServer) GetWardBusinessSus(context.Context, *WardBusinessSusIDIn) (*WardBusinessSusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWardBusinessSus not implemented")
}
func (UnimplementedWardBusinessSusServiceServer) SearchWardBusinessSus(context.Context, *WardBusinessSus) (*WardBusinessSusRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWardBusinessSus not implemented")
}
func (UnimplementedWardBusinessSusServiceServer) PostWardBusinessSus(context.Context, *WardBusinessSus) (*WardBusinessSusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWardBusinessSus not implemented")
}
func (UnimplementedWardBusinessSusServiceServer) PatchWardBusinessSus(context.Context, *WardBusinessSus) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchWardBusinessSus not implemented")
}
func (UnimplementedWardBusinessSusServiceServer) DeleteWardBusinessSus(context.Context, *WardBusinessSusIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWardBusinessSus not implemented")
}
func (UnimplementedWardBusinessSusServiceServer) mustEmbedUnimplementedWardBusinessSusServiceServer() {
}

// UnsafeWardBusinessSusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardBusinessSusServiceServer will
// result in compilation errors.
type UnsafeWardBusinessSusServiceServer interface {
	mustEmbedUnimplementedWardBusinessSusServiceServer()
}

func RegisterWardBusinessSusServiceServer(s grpc.ServiceRegistrar, srv WardBusinessSusServiceServer) {
	s.RegisterService(&WardBusinessSusService_ServiceDesc, srv)
}

func _WardBusinessSusService_GetWardBusinessSus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessSusIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessSusServiceServer).GetWardBusinessSus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessSusService/GetWardBusinessSus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessSusServiceServer).GetWardBusinessSus(ctx, req.(*WardBusinessSusIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessSusService_SearchWardBusinessSus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessSus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessSusServiceServer).SearchWardBusinessSus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessSusService/SearchWardBusinessSus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessSusServiceServer).SearchWardBusinessSus(ctx, req.(*WardBusinessSus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessSusService_PostWardBusinessSus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessSus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessSusServiceServer).PostWardBusinessSus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessSusService/PostWardBusinessSus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessSusServiceServer).PostWardBusinessSus(ctx, req.(*WardBusinessSus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessSusService_PatchWardBusinessSus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessSus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessSusServiceServer).PatchWardBusinessSus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessSusService/PatchWardBusinessSus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessSusServiceServer).PatchWardBusinessSus(ctx, req.(*WardBusinessSus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardBusinessSusService_DeleteWardBusinessSus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WardBusinessSusIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardBusinessSusServiceServer).DeleteWardBusinessSus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WardBusinessSusService/DeleteWardBusinessSus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardBusinessSusServiceServer).DeleteWardBusinessSus(ctx, req.(*WardBusinessSusIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// WardBusinessSusService_ServiceDesc is the grpc.ServiceDesc for WardBusinessSusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WardBusinessSusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WardBusinessSusService",
	HandlerType: (*WardBusinessSusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWardBusinessSus",
			Handler:    _WardBusinessSusService_GetWardBusinessSus_Handler,
		},
		{
			MethodName: "SearchWardBusinessSus",
			Handler:    _WardBusinessSusService_SearchWardBusinessSus_Handler,
		},
		{
			MethodName: "PostWardBusinessSus",
			Handler:    _WardBusinessSusService_PostWardBusinessSus_Handler,
		},
		{
			MethodName: "PatchWardBusinessSus",
			Handler:    _WardBusinessSusService_PatchWardBusinessSus_Handler,
		},
		{
			MethodName: "DeleteWardBusinessSus",
			Handler:    _WardBusinessSusService_DeleteWardBusinessSus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// BishopBusinessServiceClient is the client API for BishopBusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BishopBusinessServiceClient interface {
	GetBishopBusiness(ctx context.Context, in *BishopBusinessIDIn, opts ...grpc.CallOption) (*BishopBusinessResponse, error)
	SearchBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*BishopBusinessRepeatResponse, error)
	PostBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*BishopBusinessResponse, error)
	PatchBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*Result, error)
	DeleteBishopBusiness(ctx context.Context, in *BishopBusinessIDIn, opts ...grpc.CallOption) (*Result, error)
}

type bishopBusinessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBishopBusinessServiceClient(cc grpc.ClientConnInterface) BishopBusinessServiceClient {
	return &bishopBusinessServiceClient{cc}
}

func (c *bishopBusinessServiceClient) GetBishopBusiness(ctx context.Context, in *BishopBusinessIDIn, opts ...grpc.CallOption) (*BishopBusinessResponse, error) {
	out := new(BishopBusinessResponse)
	err := c.cc.Invoke(ctx, "/proto.BishopBusinessService/GetBishopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bishopBusinessServiceClient) SearchBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*BishopBusinessRepeatResponse, error) {
	out := new(BishopBusinessRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.BishopBusinessService/SearchBishopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bishopBusinessServiceClient) PostBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*BishopBusinessResponse, error) {
	out := new(BishopBusinessResponse)
	err := c.cc.Invoke(ctx, "/proto.BishopBusinessService/PostBishopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bishopBusinessServiceClient) PatchBishopBusiness(ctx context.Context, in *BishopBusiness, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.BishopBusinessService/PatchBishopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bishopBusinessServiceClient) DeleteBishopBusiness(ctx context.Context, in *BishopBusinessIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.BishopBusinessService/DeleteBishopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BishopBusinessServiceServer is the server API for BishopBusinessService service.
// All implementations must embed UnimplementedBishopBusinessServiceServer
// for forward compatibility
type BishopBusinessServiceServer interface {
	GetBishopBusiness(context.Context, *BishopBusinessIDIn) (*BishopBusinessResponse, error)
	SearchBishopBusiness(context.Context, *BishopBusiness) (*BishopBusinessRepeatResponse, error)
	PostBishopBusiness(context.Context, *BishopBusiness) (*BishopBusinessResponse, error)
	PatchBishopBusiness(context.Context, *BishopBusiness) (*Result, error)
	DeleteBishopBusiness(context.Context, *BishopBusinessIDIn) (*Result, error)
	mustEmbedUnimplementedBishopBusinessServiceServer()
}

// UnimplementedBishopBusinessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBishopBusinessServiceServer struct {
}

func (UnimplementedBishopBusinessServiceServer) GetBishopBusiness(context.Context, *BishopBusinessIDIn) (*BishopBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBishopBusiness not implemented")
}
func (UnimplementedBishopBusinessServiceServer) SearchBishopBusiness(context.Context, *BishopBusiness) (*BishopBusinessRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBishopBusiness not implemented")
}
func (UnimplementedBishopBusinessServiceServer) PostBishopBusiness(context.Context, *BishopBusiness) (*BishopBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBishopBusiness not implemented")
}
func (UnimplementedBishopBusinessServiceServer) PatchBishopBusiness(context.Context, *BishopBusiness) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBishopBusiness not implemented")
}
func (UnimplementedBishopBusinessServiceServer) DeleteBishopBusiness(context.Context, *BishopBusinessIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBishopBusiness not implemented")
}
func (UnimplementedBishopBusinessServiceServer) mustEmbedUnimplementedBishopBusinessServiceServer() {}

// UnsafeBishopBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BishopBusinessServiceServer will
// result in compilation errors.
type UnsafeBishopBusinessServiceServer interface {
	mustEmbedUnimplementedBishopBusinessServiceServer()
}

func RegisterBishopBusinessServiceServer(s grpc.ServiceRegistrar, srv BishopBusinessServiceServer) {
	s.RegisterService(&BishopBusinessService_ServiceDesc, srv)
}

func _BishopBusinessService_GetBishopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BishopBusinessIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BishopBusinessServiceServer).GetBishopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BishopBusinessService/GetBishopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BishopBusinessServiceServer).GetBishopBusiness(ctx, req.(*BishopBusinessIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BishopBusinessService_SearchBishopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BishopBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BishopBusinessServiceServer).SearchBishopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BishopBusinessService/SearchBishopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BishopBusinessServiceServer).SearchBishopBusiness(ctx, req.(*BishopBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _BishopBusinessService_PostBishopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BishopBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BishopBusinessServiceServer).PostBishopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BishopBusinessService/PostBishopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BishopBusinessServiceServer).PostBishopBusiness(ctx, req.(*BishopBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _BishopBusinessService_PatchBishopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BishopBusiness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BishopBusinessServiceServer).PatchBishopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BishopBusinessService/PatchBishopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BishopBusinessServiceServer).PatchBishopBusiness(ctx, req.(*BishopBusiness))
	}
	return interceptor(ctx, in, info, handler)
}

func _BishopBusinessService_DeleteBishopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BishopBusinessIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BishopBusinessServiceServer).DeleteBishopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BishopBusinessService/DeleteBishopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BishopBusinessServiceServer).DeleteBishopBusiness(ctx, req.(*BishopBusinessIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// BishopBusinessService_ServiceDesc is the grpc.ServiceDesc for BishopBusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BishopBusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BishopBusinessService",
	HandlerType: (*BishopBusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBishopBusiness",
			Handler:    _BishopBusinessService_GetBishopBusiness_Handler,
		},
		{
			MethodName: "SearchBishopBusiness",
			Handler:    _BishopBusinessService_SearchBishopBusiness_Handler,
		},
		{
			MethodName: "PostBishopBusiness",
			Handler:    _BishopBusinessService_PostBishopBusiness_Handler,
		},
		{
			MethodName: "PatchBishopBusiness",
			Handler:    _BishopBusinessService_PatchBishopBusiness_Handler,
		},
		{
			MethodName: "DeleteBishopBusiness",
			Handler:    _BishopBusinessService_DeleteBishopBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// NewMemberServiceClient is the client API for NewMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewMemberServiceClient interface {
	GetNewMember(ctx context.Context, in *NewMemberIDIn, opts ...grpc.CallOption) (*NewMemberResponse, error)
	SearchNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*NewMemberRepeatResponse, error)
	PostNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*NewMemberResponse, error)
	PatchNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*Result, error)
	DeleteNewMember(ctx context.Context, in *NewMemberIDIn, opts ...grpc.CallOption) (*Result, error)
}

type newMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewMemberServiceClient(cc grpc.ClientConnInterface) NewMemberServiceClient {
	return &newMemberServiceClient{cc}
}

func (c *newMemberServiceClient) GetNewMember(ctx context.Context, in *NewMemberIDIn, opts ...grpc.CallOption) (*NewMemberResponse, error) {
	out := new(NewMemberResponse)
	err := c.cc.Invoke(ctx, "/proto.NewMemberService/GetNewMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newMemberServiceClient) SearchNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*NewMemberRepeatResponse, error) {
	out := new(NewMemberRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.NewMemberService/SearchNewMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newMemberServiceClient) PostNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*NewMemberResponse, error) {
	out := new(NewMemberResponse)
	err := c.cc.Invoke(ctx, "/proto.NewMemberService/PostNewMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newMemberServiceClient) PatchNewMember(ctx context.Context, in *NewMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.NewMemberService/PatchNewMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newMemberServiceClient) DeleteNewMember(ctx context.Context, in *NewMemberIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.NewMemberService/DeleteNewMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewMemberServiceServer is the server API for NewMemberService service.
// All implementations must embed UnimplementedNewMemberServiceServer
// for forward compatibility
type NewMemberServiceServer interface {
	GetNewMember(context.Context, *NewMemberIDIn) (*NewMemberResponse, error)
	SearchNewMember(context.Context, *NewMember) (*NewMemberRepeatResponse, error)
	PostNewMember(context.Context, *NewMember) (*NewMemberResponse, error)
	PatchNewMember(context.Context, *NewMember) (*Result, error)
	DeleteNewMember(context.Context, *NewMemberIDIn) (*Result, error)
	mustEmbedUnimplementedNewMemberServiceServer()
}

// UnimplementedNewMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewMemberServiceServer struct {
}

func (UnimplementedNewMemberServiceServer) GetNewMember(context.Context, *NewMemberIDIn) (*NewMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewMember not implemented")
}
func (UnimplementedNewMemberServiceServer) SearchNewMember(context.Context, *NewMember) (*NewMemberRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNewMember not implemented")
}
func (UnimplementedNewMemberServiceServer) PostNewMember(context.Context, *NewMember) (*NewMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewMember not implemented")
}
func (UnimplementedNewMemberServiceServer) PatchNewMember(context.Context, *NewMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchNewMember not implemented")
}
func (UnimplementedNewMemberServiceServer) DeleteNewMember(context.Context, *NewMemberIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewMember not implemented")
}
func (UnimplementedNewMemberServiceServer) mustEmbedUnimplementedNewMemberServiceServer() {}

// UnsafeNewMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewMemberServiceServer will
// result in compilation errors.
type UnsafeNewMemberServiceServer interface {
	mustEmbedUnimplementedNewMemberServiceServer()
}

func RegisterNewMemberServiceServer(s grpc.ServiceRegistrar, srv NewMemberServiceServer) {
	s.RegisterService(&NewMemberService_ServiceDesc, srv)
}

func _NewMemberService_GetNewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMemberIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewMemberServiceServer).GetNewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewMemberService/GetNewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewMemberServiceServer).GetNewMember(ctx, req.(*NewMemberIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewMemberService_SearchNewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewMemberServiceServer).SearchNewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewMemberService/SearchNewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewMemberServiceServer).SearchNewMember(ctx, req.(*NewMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewMemberService_PostNewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewMemberServiceServer).PostNewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewMemberService/PostNewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewMemberServiceServer).PostNewMember(ctx, req.(*NewMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewMemberService_PatchNewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewMemberServiceServer).PatchNewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewMemberService/PatchNewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewMemberServiceServer).PatchNewMember(ctx, req.(*NewMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewMemberService_DeleteNewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMemberIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewMemberServiceServer).DeleteNewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NewMemberService/DeleteNewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewMemberServiceServer).DeleteNewMember(ctx, req.(*NewMemberIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// NewMemberService_ServiceDesc is the grpc.ServiceDesc for NewMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NewMemberService",
	HandlerType: (*NewMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewMember",
			Handler:    _NewMemberService_GetNewMember_Handler,
		},
		{
			MethodName: "SearchNewMember",
			Handler:    _NewMemberService_SearchNewMember_Handler,
		},
		{
			MethodName: "PostNewMember",
			Handler:    _NewMemberService_PostNewMember_Handler,
		},
		{
			MethodName: "PatchNewMember",
			Handler:    _NewMemberService_PatchNewMember_Handler,
		},
		{
			MethodName: "DeleteNewMember",
			Handler:    _NewMemberService_DeleteNewMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// OrdinanceServiceClient is the client API for OrdinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdinanceServiceClient interface {
	GetOrdinance(ctx context.Context, in *OrdinanceIDIn, opts ...grpc.CallOption) (*OrdinanceResponse, error)
	SearchOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*OrdinanceRepeatResponse, error)
	PostOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*OrdinanceResponse, error)
	PatchOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*Result, error)
	DeleteOrdinance(ctx context.Context, in *OrdinanceIDIn, opts ...grpc.CallOption) (*Result, error)
}

type ordinanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdinanceServiceClient(cc grpc.ClientConnInterface) OrdinanceServiceClient {
	return &ordinanceServiceClient{cc}
}

func (c *ordinanceServiceClient) GetOrdinance(ctx context.Context, in *OrdinanceIDIn, opts ...grpc.CallOption) (*OrdinanceResponse, error) {
	out := new(OrdinanceResponse)
	err := c.cc.Invoke(ctx, "/proto.OrdinanceService/GetOrdinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordinanceServiceClient) SearchOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*OrdinanceRepeatResponse, error) {
	out := new(OrdinanceRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.OrdinanceService/SearchOrdinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordinanceServiceClient) PostOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*OrdinanceResponse, error) {
	out := new(OrdinanceResponse)
	err := c.cc.Invoke(ctx, "/proto.OrdinanceService/PostOrdinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordinanceServiceClient) PatchOrdinance(ctx context.Context, in *Ordinance, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.OrdinanceService/PatchOrdinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordinanceServiceClient) DeleteOrdinance(ctx context.Context, in *OrdinanceIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.OrdinanceService/DeleteOrdinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdinanceServiceServer is the server API for OrdinanceService service.
// All implementations must embed UnimplementedOrdinanceServiceServer
// for forward compatibility
type OrdinanceServiceServer interface {
	GetOrdinance(context.Context, *OrdinanceIDIn) (*OrdinanceResponse, error)
	SearchOrdinance(context.Context, *Ordinance) (*OrdinanceRepeatResponse, error)
	PostOrdinance(context.Context, *Ordinance) (*OrdinanceResponse, error)
	PatchOrdinance(context.Context, *Ordinance) (*Result, error)
	DeleteOrdinance(context.Context, *OrdinanceIDIn) (*Result, error)
	mustEmbedUnimplementedOrdinanceServiceServer()
}

// UnimplementedOrdinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdinanceServiceServer struct {
}

func (UnimplementedOrdinanceServiceServer) GetOrdinance(context.Context, *OrdinanceIDIn) (*OrdinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdinance not implemented")
}
func (UnimplementedOrdinanceServiceServer) SearchOrdinance(context.Context, *Ordinance) (*OrdinanceRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrdinance not implemented")
}
func (UnimplementedOrdinanceServiceServer) PostOrdinance(context.Context, *Ordinance) (*OrdinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrdinance not implemented")
}
func (UnimplementedOrdinanceServiceServer) PatchOrdinance(context.Context, *Ordinance) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrdinance not implemented")
}
func (UnimplementedOrdinanceServiceServer) DeleteOrdinance(context.Context, *OrdinanceIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrdinance not implemented")
}
func (UnimplementedOrdinanceServiceServer) mustEmbedUnimplementedOrdinanceServiceServer() {}

// UnsafeOrdinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdinanceServiceServer will
// result in compilation errors.
type UnsafeOrdinanceServiceServer interface {
	mustEmbedUnimplementedOrdinanceServiceServer()
}

func RegisterOrdinanceServiceServer(s grpc.ServiceRegistrar, srv OrdinanceServiceServer) {
	s.RegisterService(&OrdinanceService_ServiceDesc, srv)
}

func _OrdinanceService_GetOrdinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdinanceIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdinanceServiceServer).GetOrdinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrdinanceService/GetOrdinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdinanceServiceServer).GetOrdinance(ctx, req.(*OrdinanceIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdinanceService_SearchOrdinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ordinance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdinanceServiceServer).SearchOrdinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrdinanceService/SearchOrdinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdinanceServiceServer).SearchOrdinance(ctx, req.(*Ordinance))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdinanceService_PostOrdinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ordinance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdinanceServiceServer).PostOrdinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrdinanceService/PostOrdinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdinanceServiceServer).PostOrdinance(ctx, req.(*Ordinance))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdinanceService_PatchOrdinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ordinance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdinanceServiceServer).PatchOrdinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrdinanceService/PatchOrdinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdinanceServiceServer).PatchOrdinance(ctx, req.(*Ordinance))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdinanceService_DeleteOrdinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdinanceIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdinanceServiceServer).DeleteOrdinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrdinanceService/DeleteOrdinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdinanceServiceServer).DeleteOrdinance(ctx, req.(*OrdinanceIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdinanceService_ServiceDesc is the grpc.ServiceDesc for OrdinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrdinanceService",
	HandlerType: (*OrdinanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrdinance",
			Handler:    _OrdinanceService_GetOrdinance_Handler,
		},
		{
			MethodName: "SearchOrdinance",
			Handler:    _OrdinanceService_SearchOrdinance_Handler,
		},
		{
			MethodName: "PostOrdinance",
			Handler:    _OrdinanceService_PostOrdinance_Handler,
		},
		{
			MethodName: "PatchOrdinance",
			Handler:    _OrdinanceService_PatchOrdinance_Handler,
		},
		{
			MethodName: "DeleteOrdinance",
			Handler:    _OrdinanceService_DeleteOrdinance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// SpeakerServiceClient is the client API for SpeakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakerServiceClient interface {
	GetSpeaker(ctx context.Context, in *SpeakerIDIn, opts ...grpc.CallOption) (*SpeakerResponse, error)
	SearchSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*SpeakerRepeatResponse, error)
	PostSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*SpeakerResponse, error)
	PatchSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*Result, error)
	DeleteSpeaker(ctx context.Context, in *SpeakerIDIn, opts ...grpc.CallOption) (*Result, error)
}

type speakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerServiceClient(cc grpc.ClientConnInterface) SpeakerServiceClient {
	return &speakerServiceClient{cc}
}

func (c *speakerServiceClient) GetSpeaker(ctx context.Context, in *SpeakerIDIn, opts ...grpc.CallOption) (*SpeakerResponse, error) {
	out := new(SpeakerResponse)
	err := c.cc.Invoke(ctx, "/proto.SpeakerService/GetSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) SearchSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*SpeakerRepeatResponse, error) {
	out := new(SpeakerRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.SpeakerService/SearchSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) PostSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*SpeakerResponse, error) {
	out := new(SpeakerResponse)
	err := c.cc.Invoke(ctx, "/proto.SpeakerService/PostSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) PatchSpeaker(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.SpeakerService/PatchSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) DeleteSpeaker(ctx context.Context, in *SpeakerIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.SpeakerService/DeleteSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerServiceServer is the server API for SpeakerService service.
// All implementations must embed UnimplementedSpeakerServiceServer
// for forward compatibility
type SpeakerServiceServer interface {
	GetSpeaker(context.Context, *SpeakerIDIn) (*SpeakerResponse, error)
	SearchSpeaker(context.Context, *Speaker) (*SpeakerRepeatResponse, error)
	PostSpeaker(context.Context, *Speaker) (*SpeakerResponse, error)
	PatchSpeaker(context.Context, *Speaker) (*Result, error)
	DeleteSpeaker(context.Context, *SpeakerIDIn) (*Result, error)
	mustEmbedUnimplementedSpeakerServiceServer()
}

// UnimplementedSpeakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeakerServiceServer struct {
}

func (UnimplementedSpeakerServiceServer) GetSpeaker(context.Context, *SpeakerIDIn) (*SpeakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) SearchSpeaker(context.Context, *Speaker) (*SpeakerRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) PostSpeaker(context.Context, *Speaker) (*SpeakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) PatchSpeaker(context.Context, *Speaker) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) DeleteSpeaker(context.Context, *SpeakerIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpeaker not implemented")
}
func (UnimplementedSpeakerServiceServer) mustEmbedUnimplementedSpeakerServiceServer() {}

// UnsafeSpeakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerServiceServer will
// result in compilation errors.
type UnsafeSpeakerServiceServer interface {
	mustEmbedUnimplementedSpeakerServiceServer()
}

func RegisterSpeakerServiceServer(s grpc.ServiceRegistrar, srv SpeakerServiceServer) {
	s.RegisterService(&SpeakerService_ServiceDesc, srv)
}

func _SpeakerService_GetSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).GetSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpeakerService/GetSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).GetSpeaker(ctx, req.(*SpeakerIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_SearchSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speaker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).SearchSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpeakerService/SearchSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).SearchSpeaker(ctx, req.(*Speaker))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_PostSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speaker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).PostSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpeakerService/PostSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).PostSpeaker(ctx, req.(*Speaker))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_PatchSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speaker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).PatchSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpeakerService/PatchSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).PatchSpeaker(ctx, req.(*Speaker))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_DeleteSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).DeleteSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpeakerService/DeleteSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).DeleteSpeaker(ctx, req.(*SpeakerIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeakerService_ServiceDesc is the grpc.ServiceDesc for SpeakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SpeakerService",
	HandlerType: (*SpeakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpeaker",
			Handler:    _SpeakerService_GetSpeaker_Handler,
		},
		{
			MethodName: "SearchSpeaker",
			Handler:    _SpeakerService_SearchSpeaker_Handler,
		},
		{
			MethodName: "PostSpeaker",
			Handler:    _SpeakerService_PostSpeaker_Handler,
		},
		{
			MethodName: "PatchSpeaker",
			Handler:    _SpeakerService_PatchSpeaker_Handler,
		},
		{
			MethodName: "DeleteSpeaker",
			Handler:    _SpeakerService_DeleteSpeaker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// AnnouncementServiceClient is the client API for AnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementServiceClient interface {
	GetAnnouncement(ctx context.Context, in *AnnouncementIDIn, opts ...grpc.CallOption) (*AnnouncementResponse, error)
	SearchAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementRepeatResponse, error)
	PostAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementResponse, error)
	PatchAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Result, error)
	DeleteAnnouncement(ctx context.Context, in *AnnouncementIDIn, opts ...grpc.CallOption) (*Result, error)
}

type announcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementServiceClient(cc grpc.ClientConnInterface) AnnouncementServiceClient {
	return &announcementServiceClient{cc}
}

func (c *announcementServiceClient) GetAnnouncement(ctx context.Context, in *AnnouncementIDIn, opts ...grpc.CallOption) (*AnnouncementResponse, error) {
	out := new(AnnouncementResponse)
	err := c.cc.Invoke(ctx, "/proto.AnnouncementService/GetAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) SearchAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementRepeatResponse, error) {
	out := new(AnnouncementRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.AnnouncementService/SearchAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) PostAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*AnnouncementResponse, error) {
	out := new(AnnouncementResponse)
	err := c.cc.Invoke(ctx, "/proto.AnnouncementService/PostAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) PatchAnnouncement(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.AnnouncementService/PatchAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) DeleteAnnouncement(ctx context.Context, in *AnnouncementIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.AnnouncementService/DeleteAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementServiceServer is the server API for AnnouncementService service.
// All implementations must embed UnimplementedAnnouncementServiceServer
// for forward compatibility
type AnnouncementServiceServer interface {
	GetAnnouncement(context.Context, *AnnouncementIDIn) (*AnnouncementResponse, error)
	SearchAnnouncement(context.Context, *Announcement) (*AnnouncementRepeatResponse, error)
	PostAnnouncement(context.Context, *Announcement) (*AnnouncementResponse, error)
	PatchAnnouncement(context.Context, *Announcement) (*Result, error)
	DeleteAnnouncement(context.Context, *AnnouncementIDIn) (*Result, error)
	mustEmbedUnimplementedAnnouncementServiceServer()
}

// UnimplementedAnnouncementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementServiceServer struct {
}

func (UnimplementedAnnouncementServiceServer) GetAnnouncement(context.Context, *AnnouncementIDIn) (*AnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) SearchAnnouncement(context.Context, *Announcement) (*AnnouncementRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) PostAnnouncement(context.Context, *Announcement) (*AnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) PatchAnnouncement(context.Context, *Announcement) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) DeleteAnnouncement(context.Context, *AnnouncementIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) mustEmbedUnimplementedAnnouncementServiceServer() {}

// UnsafeAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServiceServer will
// result in compilation errors.
type UnsafeAnnouncementServiceServer interface {
	mustEmbedUnimplementedAnnouncementServiceServer()
}

func RegisterAnnouncementServiceServer(s grpc.ServiceRegistrar, srv AnnouncementServiceServer) {
	s.RegisterService(&AnnouncementService_ServiceDesc, srv)
}

func _AnnouncementService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AnnouncementService/GetAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, req.(*AnnouncementIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_SearchAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).SearchAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AnnouncementService/SearchAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).SearchAnnouncement(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_PostAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).PostAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AnnouncementService/PostAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).PostAnnouncement(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_PatchAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).PatchAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AnnouncementService/PatchAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).PatchAnnouncement(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AnnouncementService/DeleteAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).DeleteAnnouncement(ctx, req.(*AnnouncementIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementService_ServiceDesc is the grpc.ServiceDesc for AnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AnnouncementService",
	HandlerType: (*AnnouncementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnouncement",
			Handler:    _AnnouncementService_GetAnnouncement_Handler,
		},
		{
			MethodName: "SearchAnnouncement",
			Handler:    _AnnouncementService_SearchAnnouncement_Handler,
		},
		{
			MethodName: "PostAnnouncement",
			Handler:    _AnnouncementService_PostAnnouncement_Handler,
		},
		{
			MethodName: "PatchAnnouncement",
			Handler:    _AnnouncementService_PatchAnnouncement_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _AnnouncementService_DeleteAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// HymnServiceClient is the client API for HymnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HymnServiceClient interface {
	GetHymn(ctx context.Context, in *HymnIDIn, opts ...grpc.CallOption) (*HymnResponse, error)
	SearchHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*HymnRepeatResponse, error)
	PostHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*HymnResponse, error)
	PatchHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*Result, error)
	DeleteHymn(ctx context.Context, in *HymnIDIn, opts ...grpc.CallOption) (*Result, error)
}

type hymnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHymnServiceClient(cc grpc.ClientConnInterface) HymnServiceClient {
	return &hymnServiceClient{cc}
}

func (c *hymnServiceClient) GetHymn(ctx context.Context, in *HymnIDIn, opts ...grpc.CallOption) (*HymnResponse, error) {
	out := new(HymnResponse)
	err := c.cc.Invoke(ctx, "/proto.HymnService/GetHymn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hymnServiceClient) SearchHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*HymnRepeatResponse, error) {
	out := new(HymnRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.HymnService/SearchHymn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hymnServiceClient) PostHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*HymnResponse, error) {
	out := new(HymnResponse)
	err := c.cc.Invoke(ctx, "/proto.HymnService/PostHymn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hymnServiceClient) PatchHymn(ctx context.Context, in *Hymn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.HymnService/PatchHymn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hymnServiceClient) DeleteHymn(ctx context.Context, in *HymnIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.HymnService/DeleteHymn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HymnServiceServer is the server API for HymnService service.
// All implementations must embed UnimplementedHymnServiceServer
// for forward compatibility
type HymnServiceServer interface {
	GetHymn(context.Context, *HymnIDIn) (*HymnResponse, error)
	SearchHymn(context.Context, *Hymn) (*HymnRepeatResponse, error)
	PostHymn(context.Context, *Hymn) (*HymnResponse, error)
	PatchHymn(context.Context, *Hymn) (*Result, error)
	DeleteHymn(context.Context, *HymnIDIn) (*Result, error)
	mustEmbedUnimplementedHymnServiceServer()
}

// UnimplementedHymnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHymnServiceServer struct {
}

func (UnimplementedHymnServiceServer) GetHymn(context.Context, *HymnIDIn) (*HymnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHymn not implemented")
}
func (UnimplementedHymnServiceServer) SearchHymn(context.Context, *Hymn) (*HymnRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHymn not implemented")
}
func (UnimplementedHymnServiceServer) PostHymn(context.Context, *Hymn) (*HymnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHymn not implemented")
}
func (UnimplementedHymnServiceServer) PatchHymn(context.Context, *Hymn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchHymn not implemented")
}
func (UnimplementedHymnServiceServer) DeleteHymn(context.Context, *HymnIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHymn not implemented")
}
func (UnimplementedHymnServiceServer) mustEmbedUnimplementedHymnServiceServer() {}

// UnsafeHymnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HymnServiceServer will
// result in compilation errors.
type UnsafeHymnServiceServer interface {
	mustEmbedUnimplementedHymnServiceServer()
}

func RegisterHymnServiceServer(s grpc.ServiceRegistrar, srv HymnServiceServer) {
	s.RegisterService(&HymnService_ServiceDesc, srv)
}

func _HymnService_GetHymn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HymnIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HymnServiceServer).GetHymn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HymnService/GetHymn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HymnServiceServer).GetHymn(ctx, req.(*HymnIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HymnService_SearchHymn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hymn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HymnServiceServer).SearchHymn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HymnService/SearchHymn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HymnServiceServer).SearchHymn(ctx, req.(*Hymn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HymnService_PostHymn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hymn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HymnServiceServer).PostHymn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HymnService/PostHymn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HymnServiceServer).PostHymn(ctx, req.(*Hymn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HymnService_PatchHymn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hymn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HymnServiceServer).PatchHymn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HymnService/PatchHymn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HymnServiceServer).PatchHymn(ctx, req.(*Hymn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HymnService_DeleteHymn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HymnIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HymnServiceServer).DeleteHymn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HymnService/DeleteHymn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HymnServiceServer).DeleteHymn(ctx, req.(*HymnIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// HymnService_ServiceDesc is the grpc.ServiceDesc for HymnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HymnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HymnService",
	HandlerType: (*HymnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHymn",
			Handler:    _HymnService_GetHymn_Handler,
		},
		{
			MethodName: "SearchHymn",
			Handler:    _HymnService_SearchHymn_Handler,
		},
		{
			MethodName: "PostHymn",
			Handler:    _HymnService_PostHymn_Handler,
		},
		{
			MethodName: "PatchHymn",
			Handler:    _HymnService_PatchHymn_Handler,
		},
		{
			MethodName: "DeleteHymn",
			Handler:    _HymnService_DeleteHymn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// DefaultCallingServiceClient is the client API for DefaultCallingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultCallingServiceClient interface {
	GetDefaultCalling(ctx context.Context, in *DefaultCallingIDIn, opts ...grpc.CallOption) (*DefaultCallingResponse, error)
	SearchDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*DefaultCallingRepeatResponse, error)
	PostDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*DefaultCallingResponse, error)
	PatchDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*Result, error)
	DeleteDefaultCalling(ctx context.Context, in *DefaultCallingIDIn, opts ...grpc.CallOption) (*Result, error)
}

type defaultCallingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultCallingServiceClient(cc grpc.ClientConnInterface) DefaultCallingServiceClient {
	return &defaultCallingServiceClient{cc}
}

func (c *defaultCallingServiceClient) GetDefaultCalling(ctx context.Context, in *DefaultCallingIDIn, opts ...grpc.CallOption) (*DefaultCallingResponse, error) {
	out := new(DefaultCallingResponse)
	err := c.cc.Invoke(ctx, "/proto.DefaultCallingService/GetDefaultCalling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultCallingServiceClient) SearchDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*DefaultCallingRepeatResponse, error) {
	out := new(DefaultCallingRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.DefaultCallingService/SearchDefaultCalling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultCallingServiceClient) PostDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*DefaultCallingResponse, error) {
	out := new(DefaultCallingResponse)
	err := c.cc.Invoke(ctx, "/proto.DefaultCallingService/PostDefaultCalling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultCallingServiceClient) PatchDefaultCalling(ctx context.Context, in *DefaultCalling, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.DefaultCallingService/PatchDefaultCalling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultCallingServiceClient) DeleteDefaultCalling(ctx context.Context, in *DefaultCallingIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.DefaultCallingService/DeleteDefaultCalling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultCallingServiceServer is the server API for DefaultCallingService service.
// All implementations must embed UnimplementedDefaultCallingServiceServer
// for forward compatibility
type DefaultCallingServiceServer interface {
	GetDefaultCalling(context.Context, *DefaultCallingIDIn) (*DefaultCallingResponse, error)
	SearchDefaultCalling(context.Context, *DefaultCalling) (*DefaultCallingRepeatResponse, error)
	PostDefaultCalling(context.Context, *DefaultCalling) (*DefaultCallingResponse, error)
	PatchDefaultCalling(context.Context, *DefaultCalling) (*Result, error)
	DeleteDefaultCalling(context.Context, *DefaultCallingIDIn) (*Result, error)
	mustEmbedUnimplementedDefaultCallingServiceServer()
}

// UnimplementedDefaultCallingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDefaultCallingServiceServer struct {
}

func (UnimplementedDefaultCallingServiceServer) GetDefaultCalling(context.Context, *DefaultCallingIDIn) (*DefaultCallingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultCalling not implemented")
}
func (UnimplementedDefaultCallingServiceServer) SearchDefaultCalling(context.Context, *DefaultCalling) (*DefaultCallingRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultCalling not implemented")
}
func (UnimplementedDefaultCallingServiceServer) PostDefaultCalling(context.Context, *DefaultCalling) (*DefaultCallingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDefaultCalling not implemented")
}
func (UnimplementedDefaultCallingServiceServer) PatchDefaultCalling(context.Context, *DefaultCalling) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDefaultCalling not implemented")
}
func (UnimplementedDefaultCallingServiceServer) DeleteDefaultCalling(context.Context, *DefaultCallingIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefaultCalling not implemented")
}
func (UnimplementedDefaultCallingServiceServer) mustEmbedUnimplementedDefaultCallingServiceServer() {}

// UnsafeDefaultCallingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultCallingServiceServer will
// result in compilation errors.
type UnsafeDefaultCallingServiceServer interface {
	mustEmbedUnimplementedDefaultCallingServiceServer()
}

func RegisterDefaultCallingServiceServer(s grpc.ServiceRegistrar, srv DefaultCallingServiceServer) {
	s.RegisterService(&DefaultCallingService_ServiceDesc, srv)
}

func _DefaultCallingService_GetDefaultCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCallingIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultCallingServiceServer).GetDefaultCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefaultCallingService/GetDefaultCalling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultCallingServiceServer).GetDefaultCalling(ctx, req.(*DefaultCallingIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultCallingService_SearchDefaultCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCalling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultCallingServiceServer).SearchDefaultCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefaultCallingService/SearchDefaultCalling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultCallingServiceServer).SearchDefaultCalling(ctx, req.(*DefaultCalling))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultCallingService_PostDefaultCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCalling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultCallingServiceServer).PostDefaultCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefaultCallingService/PostDefaultCalling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultCallingServiceServer).PostDefaultCalling(ctx, req.(*DefaultCalling))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultCallingService_PatchDefaultCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCalling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultCallingServiceServer).PatchDefaultCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefaultCallingService/PatchDefaultCalling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultCallingServiceServer).PatchDefaultCalling(ctx, req.(*DefaultCalling))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultCallingService_DeleteDefaultCalling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultCallingIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultCallingServiceServer).DeleteDefaultCalling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DefaultCallingService/DeleteDefaultCalling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultCallingServiceServer).DeleteDefaultCalling(ctx, req.(*DefaultCallingIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultCallingService_ServiceDesc is the grpc.ServiceDesc for DefaultCallingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultCallingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DefaultCallingService",
	HandlerType: (*DefaultCallingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultCalling",
			Handler:    _DefaultCallingService_GetDefaultCalling_Handler,
		},
		{
			MethodName: "SearchDefaultCalling",
			Handler:    _DefaultCallingService_SearchDefaultCalling_Handler,
		},
		{
			MethodName: "PostDefaultCalling",
			Handler:    _DefaultCallingService_PostDefaultCalling_Handler,
		},
		{
			MethodName: "PatchDefaultCalling",
			Handler:    _DefaultCallingService_PatchDefaultCalling_Handler,
		},
		{
			MethodName: "DeleteDefaultCalling",
			Handler:    _DefaultCallingService_DeleteDefaultCalling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	GetRole(ctx context.Context, in *RoleIDIn, opts ...grpc.CallOption) (*RoleResponse, error)
	SearchRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleRepeatResponse, error)
	PostRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleResponse, error)
	PatchRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Result, error)
	DeleteRole(ctx context.Context, in *RoleIDIn, opts ...grpc.CallOption) (*Result, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *RoleIDIn, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SearchRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleRepeatResponse, error) {
	out := new(RoleRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleService/SearchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PostRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleService/PostRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) PatchRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.RoleService/PatchRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *RoleIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.RoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	GetRole(context.Context, *RoleIDIn) (*RoleResponse, error)
	SearchRole(context.Context, *Role) (*RoleRepeatResponse, error)
	PostRole(context.Context, *Role) (*RoleResponse, error)
	PatchRole(context.Context, *Role) (*Result, error)
	DeleteRole(context.Context, *RoleIDIn) (*Result, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) GetRole(context.Context, *RoleIDIn) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServiceServer) SearchRole(context.Context, *Role) (*RoleRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRole not implemented")
}
func (UnimplementedRoleServiceServer) PostRole(context.Context, *Role) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRole not implemented")
}
func (UnimplementedRoleServiceServer) PatchRole(context.Context, *Role) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *RoleIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*RoleIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SearchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SearchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleService/SearchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SearchRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PostRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PostRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleService/PostRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PostRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_PatchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).PatchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleService/PatchRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).PatchRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*RoleIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "SearchRole",
			Handler:    _RoleService_SearchRole_Handler,
		},
		{
			MethodName: "PostRole",
			Handler:    _RoleService_PostRole_Handler,
		},
		{
			MethodName: "PatchRole",
			Handler:    _RoleService_PatchRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// RoleUserServiceClient is the client API for RoleUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleUserServiceClient interface {
	GetRoleUser(ctx context.Context, in *RoleUserIDIn, opts ...grpc.CallOption) (*RoleUserResponse, error)
	SearchRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*RoleUserRepeatResponse, error)
	PostRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*RoleUserResponse, error)
	PatchRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*Result, error)
	DeleteRoleUser(ctx context.Context, in *RoleUserIDIn, opts ...grpc.CallOption) (*Result, error)
}

type roleUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleUserServiceClient(cc grpc.ClientConnInterface) RoleUserServiceClient {
	return &roleUserServiceClient{cc}
}

func (c *roleUserServiceClient) GetRoleUser(ctx context.Context, in *RoleUserIDIn, opts ...grpc.CallOption) (*RoleUserResponse, error) {
	out := new(RoleUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleUserService/GetRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleUserServiceClient) SearchRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*RoleUserRepeatResponse, error) {
	out := new(RoleUserRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleUserService/SearchRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleUserServiceClient) PostRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*RoleUserResponse, error) {
	out := new(RoleUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleUserService/PostRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleUserServiceClient) PatchRoleUser(ctx context.Context, in *RoleUser, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.RoleUserService/PatchRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleUserServiceClient) DeleteRoleUser(ctx context.Context, in *RoleUserIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.RoleUserService/DeleteRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleUserServiceServer is the server API for RoleUserService service.
// All implementations must embed UnimplementedRoleUserServiceServer
// for forward compatibility
type RoleUserServiceServer interface {
	GetRoleUser(context.Context, *RoleUserIDIn) (*RoleUserResponse, error)
	SearchRoleUser(context.Context, *RoleUser) (*RoleUserRepeatResponse, error)
	PostRoleUser(context.Context, *RoleUser) (*RoleUserResponse, error)
	PatchRoleUser(context.Context, *RoleUser) (*Result, error)
	DeleteRoleUser(context.Context, *RoleUserIDIn) (*Result, error)
	mustEmbedUnimplementedRoleUserServiceServer()
}

// UnimplementedRoleUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleUserServiceServer struct {
}

func (UnimplementedRoleUserServiceServer) GetRoleUser(context.Context, *RoleUserIDIn) (*RoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUser not implemented")
}
func (UnimplementedRoleUserServiceServer) SearchRoleUser(context.Context, *RoleUser) (*RoleUserRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoleUser not implemented")
}
func (UnimplementedRoleUserServiceServer) PostRoleUser(context.Context, *RoleUser) (*RoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRoleUser not implemented")
}
func (UnimplementedRoleUserServiceServer) PatchRoleUser(context.Context, *RoleUser) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoleUser not implemented")
}
func (UnimplementedRoleUserServiceServer) DeleteRoleUser(context.Context, *RoleUserIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleUser not implemented")
}
func (UnimplementedRoleUserServiceServer) mustEmbedUnimplementedRoleUserServiceServer() {}

// UnsafeRoleUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleUserServiceServer will
// result in compilation errors.
type UnsafeRoleUserServiceServer interface {
	mustEmbedUnimplementedRoleUserServiceServer()
}

func RegisterRoleUserServiceServer(s grpc.ServiceRegistrar, srv RoleUserServiceServer) {
	s.RegisterService(&RoleUserService_ServiceDesc, srv)
}

func _RoleUserService_GetRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUserIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleUserServiceServer).GetRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleUserService/GetRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleUserServiceServer).GetRoleUser(ctx, req.(*RoleUserIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleUserService_SearchRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleUserServiceServer).SearchRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleUserService/SearchRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleUserServiceServer).SearchRoleUser(ctx, req.(*RoleUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleUserService_PostRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleUserServiceServer).PostRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleUserService/PostRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleUserServiceServer).PostRoleUser(ctx, req.(*RoleUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleUserService_PatchRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleUserServiceServer).PatchRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleUserService/PatchRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleUserServiceServer).PatchRoleUser(ctx, req.(*RoleUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleUserService_DeleteRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUserIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleUserServiceServer).DeleteRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleUserService/DeleteRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleUserServiceServer).DeleteRoleUser(ctx, req.(*RoleUserIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleUserService_ServiceDesc is the grpc.ServiceDesc for RoleUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleUserService",
	HandlerType: (*RoleUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoleUser",
			Handler:    _RoleUserService_GetRoleUser_Handler,
		},
		{
			MethodName: "SearchRoleUser",
			Handler:    _RoleUserService_SearchRoleUser_Handler,
		},
		{
			MethodName: "PostRoleUser",
			Handler:    _RoleUserService_PostRoleUser_Handler,
		},
		{
			MethodName: "PatchRoleUser",
			Handler:    _RoleUserService_PatchRoleUser_Handler,
		},
		{
			MethodName: "DeleteRoleUser",
			Handler:    _RoleUserService_DeleteRoleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}

// MembersServiceClient is the client API for MembersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersServiceClient interface {
	GetMember(ctx context.Context, in *MemberIDIn, opts ...grpc.CallOption) (*MemberResponse, error)
	SearchMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberRepeatResponse, error)
	PostMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberResponse, error)
	PatchMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Result, error)
	DeleteMember(ctx context.Context, in *MemberIDIn, opts ...grpc.CallOption) (*Result, error)
}

type membersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersServiceClient(cc grpc.ClientConnInterface) MembersServiceClient {
	return &membersServiceClient{cc}
}

func (c *membersServiceClient) GetMember(ctx context.Context, in *MemberIDIn, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/proto.MembersService/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) SearchMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberRepeatResponse, error) {
	out := new(MemberRepeatResponse)
	err := c.cc.Invoke(ctx, "/proto.MembersService/SearchMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) PostMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/proto.MembersService/PostMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) PatchMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.MembersService/PatchMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) DeleteMember(ctx context.Context, in *MemberIDIn, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.MembersService/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServiceServer is the server API for MembersService service.
// All implementations must embed UnimplementedMembersServiceServer
// for forward compatibility
type MembersServiceServer interface {
	GetMember(context.Context, *MemberIDIn) (*MemberResponse, error)
	SearchMember(context.Context, *Member) (*MemberRepeatResponse, error)
	PostMember(context.Context, *Member) (*MemberResponse, error)
	PatchMember(context.Context, *Member) (*Result, error)
	DeleteMember(context.Context, *MemberIDIn) (*Result, error)
	mustEmbedUnimplementedMembersServiceServer()
}

// UnimplementedMembersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMembersServiceServer struct {
}

func (UnimplementedMembersServiceServer) GetMember(context.Context, *MemberIDIn) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedMembersServiceServer) SearchMember(context.Context, *Member) (*MemberRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMember not implemented")
}
func (UnimplementedMembersServiceServer) PostMember(context.Context, *Member) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMember not implemented")
}
func (UnimplementedMembersServiceServer) PatchMember(context.Context, *Member) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchMember not implemented")
}
func (UnimplementedMembersServiceServer) DeleteMember(context.Context, *MemberIDIn) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMembersServiceServer) mustEmbedUnimplementedMembersServiceServer() {}

// UnsafeMembersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServiceServer will
// result in compilation errors.
type UnsafeMembersServiceServer interface {
	mustEmbedUnimplementedMembersServiceServer()
}

func RegisterMembersServiceServer(s grpc.ServiceRegistrar, srv MembersServiceServer) {
	s.RegisterService(&MembersService_ServiceDesc, srv)
}

func _MembersService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MembersService/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).GetMember(ctx, req.(*MemberIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_SearchMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).SearchMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MembersService/SearchMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).SearchMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_PostMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).PostMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MembersService/PostMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).PostMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_PatchMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).PatchMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MembersService/PatchMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).PatchMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MembersService/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).DeleteMember(ctx, req.(*MemberIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

// MembersService_ServiceDesc is the grpc.ServiceDesc for MembersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MembersService",
	HandlerType: (*MembersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMember",
			Handler:    _MembersService_GetMember_Handler,
		},
		{
			MethodName: "SearchMember",
			Handler:    _MembersService_SearchMember_Handler,
		},
		{
			MethodName: "PostMember",
			Handler:    _MembersService_PostMember_Handler,
		},
		{
			MethodName: "PatchMember",
			Handler:    _MembersService_PatchMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MembersService_DeleteMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/agenda.proto",
}
