// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package visitor is a generated GoMock package.
package visitor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataVisitorAdapter is a mock of DataVisitorAdapter interface.
type MockDataVisitorAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDataVisitorAdapterMockRecorder
}

// MockDataVisitorAdapterMockRecorder is the mock recorder for MockDataVisitorAdapter.
type MockDataVisitorAdapterMockRecorder struct {
	mock *MockDataVisitorAdapter
}

// NewMockDataVisitorAdapter creates a new mock instance.
func NewMockDataVisitorAdapter(ctrl *gomock.Controller) *MockDataVisitorAdapter {
	mock := &MockDataVisitorAdapter{ctrl: ctrl}
	mock.recorder = &MockDataVisitorAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataVisitorAdapter) EXPECT() *MockDataVisitorAdapterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataVisitorAdapter) Create(arg0 *Visitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataVisitorAdapterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataVisitorAdapter)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDataVisitorAdapter) Delete(arg0 *Visitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataVisitorAdapterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataVisitorAdapter)(nil).Delete), arg0)
}

// Read mocks base method.
func (m *MockDataVisitorAdapter) Read(arg0 *Visitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockDataVisitorAdapterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataVisitorAdapter)(nil).Read), arg0)
}

// ReadAll mocks base method.
func (m *MockDataVisitorAdapter) ReadAll(arg0 *[]Visitor, arg1 VisitorParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDataVisitorAdapterMockRecorder) ReadAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDataVisitorAdapter)(nil).ReadAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockDataVisitorAdapter) Update(arg0 Visitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataVisitorAdapterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataVisitorAdapter)(nil).Update), arg0)
}
