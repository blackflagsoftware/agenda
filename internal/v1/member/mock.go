// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package member is a generated GoMock package.
package member

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataMemberAdapter is a mock of DataMemberAdapter interface.
type MockDataMemberAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDataMemberAdapterMockRecorder
}

// MockDataMemberAdapterMockRecorder is the mock recorder for MockDataMemberAdapter.
type MockDataMemberAdapterMockRecorder struct {
	mock *MockDataMemberAdapter
}

// NewMockDataMemberAdapter creates a new mock instance.
func NewMockDataMemberAdapter(ctrl *gomock.Controller) *MockDataMemberAdapter {
	mock := &MockDataMemberAdapter{ctrl: ctrl}
	mock.recorder = &MockDataMemberAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataMemberAdapter) EXPECT() *MockDataMemberAdapterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataMemberAdapter) Create(arg0 *Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataMemberAdapterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataMemberAdapter)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDataMemberAdapter) Delete(arg0 *Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataMemberAdapterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataMemberAdapter)(nil).Delete), arg0)
}

// Read mocks base method.
func (m *MockDataMemberAdapter) Read(arg0 *Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockDataMemberAdapterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataMemberAdapter)(nil).Read), arg0)
}

// ReadAll mocks base method.
func (m *MockDataMemberAdapter) ReadAll(arg0 *[]Member, arg1 MemberParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDataMemberAdapterMockRecorder) ReadAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDataMemberAdapter)(nil).ReadAll), arg0, arg1)
}

// Splice mocks base method.
func (m *MockDataMemberAdapter) Splice() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Splice")
	ret0, _ := ret[0].(error)
	return ret0
}

// Splice indicates an expected call of Splice.
func (mr *MockDataMemberAdapterMockRecorder) Splice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Splice", reflect.TypeOf((*MockDataMemberAdapter)(nil).Splice))
}

// Update mocks base method.
func (m *MockDataMemberAdapter) Update(arg0 Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataMemberAdapterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataMemberAdapter)(nil).Update), arg0)
}
